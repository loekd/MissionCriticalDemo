// //jaeger running as container on 1 node, with a service
@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.dev/operations/custom-recipes/')
param context object

import kubernetes as kubernetes {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
}

var host = '${svc.metadata.name}.${svc.metadata.namespace}.svc.cluster.local'
var uniqueName = 'jaeger-${uniqueString(context.resource.id)}'

var zipkinPort = 9411
var webPort = 16686
var grpcPort = 14250

var env = [
  {
    name: 'COLLECTOR_ZIPKIN_HOST_PORT'
    value: ':9411'
  }
  {
    name: 'COLLECTOR_ZIPKIN_ALLOWED_ORIGINS'
    value: '*'
  }
  {
    name: 'COLLECTOR_ZIPKIN_ALLOWED_HEADERS'
    value: '*'
  }
]

var readinessProbe = {
  httpGet: {
    path: 'http://localhost'
    port: 16686
  }
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1
}

resource jaeger 'apps/Deployment@v1' = {
  metadata: {
    name: uniqueName
  }
  spec: {
    replicas: 1
    selector: {
      matchLabels: {
        app: 'jaeger'
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: 'jaeger'
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          // NOTE: disabled because rad run only lets you see logs from 10 pods
          //'radapp.io/application': context.application == null ? '' : context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: 'jaeger'
            image: 'jaegertracing/all-in-one:latest'
            ports: [
              {
                containerPort: zipkinPort
              }
              {
                containerPort: webPort
              }
              {
                containerPort: grpcPort
              }              
            ]
            env: env
            #disable-next-line BCP036 //it is in fact allowed to be an integer
            readinessProbe: readinessProbe
          }
        ]
      }
    }
  }
}

resource svc 'core/Service@v1' = {
  metadata: {
    name: uniqueName
    labels: {
      name: uniqueName
    }
  }
  spec: {
    type: 'ClusterIP'
    selector: {
      app: 'jaeger'
      resource: context.resource.name
    }
    ports: [
      {
        name: 'http'
        port: webPort
      }
      {
        name: 'zipkin'
        port: zipkinPort
      }
      {
        name: 'grpc'
        port: grpcPort
      }
    ]
  }
}

output result object = {
  // This workaround is needed because the deployment engine omits Kubernetes resources from its output.
  //
  // Once this gap is addressed, users won't need to do this.
  resources: [
    '/planes/kubernetes/local/namespaces/${svc.metadata.namespace}/providers/core/Service/${svc.metadata.name}'
    '/planes/kubernetes/local/namespaces/${jaeger.metadata.namespace}/providers/apps/DaemonSet/${jaeger.metadata.name}'
  ]
  values: {
    host: host
    webPort: webPort
    zipkinPort: zipkinPort
    grpcPort: grpcPort
    zipkinEndpoint: 'http://${host}:${zipkinPort}/api/v2/spans'
  }
  secrets: {
    //none needed
  }
}

//deploying the recipe can be done by this command:
//rad bicep publish --file jaeger_recipe.bicep --target br:acrradius.azurecr.io/recipes/jaeger:0.1.0
//rad recipe register jaegerRecipe --environment azure --resource-type 'Applications.Core/extenders' --template-kind bicep --template-path acrradius.azurecr.io/recipes/jaeger:0.1.0 --group azure
//rad recipe register jaegerRecipe --environment local --resource-type 'Applications.Core/extenders' --template-kind bicep --template-path acrradius.azurecr.io/recipes/jaeger:0.1.0 --group local
