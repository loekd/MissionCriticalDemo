version: '3.4'

services:
  MissionCriticalDemo.DispatchApi:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5133:80"
      - "7079:443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  MissionCriticalDemo.PlantApi:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5071:80"
      - "7071:443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  mongodb_outbox:
    container_name: stateserver
    # image: bitnami/mongodb:6.0.2
    image: mongo:7.0
    restart: always
    ports:
      - 27017:27017
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - ALLOW_EMPTY_PASSWORD=yes
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - mission-critical-network
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'stateserver:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongodb_gis:
    container_name: gis_stateserver
    image: bitnami/mongodb:6.0.2
    restart: always
    ports:
      - 27018:27017
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - mission-critical-network

  mongodb_plant:
    container_name: plant_stateserver
    image: bitnami/mongodb:6.0.2
    restart: always
    ports:
      - 27019:27017
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - mission-critical-network

  mongoexpress_outbox:
    container_name: stateviewer
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=stateserver
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8081:8081
    networks:
      - mission-critical-network

  mongoexpress_plant:
    container_name: plant_stateviewer
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=plant_stateserver
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8082:8081
    networks:
      - mission-critical-network


  redis:
    container_name: "redis_service"
    image: "redis"
    ports:
      - "6378:6379"
    networks:
      - mission-critical-network

  redisinsights:
    image: redis/redisinsight:latest
    ports:
      - "5540:5540"
    networks:
      - mission-critical-network
    volumes:
      - redisinsights:/db

  zipkin:
    container_name: "zipkin"
    image: "openzipkin/zipkin:2.23.4"
    ports:
      - 9412:9411
    networks:
      - mission-critical-network

  # otel:
  #   container_name: "otel"
  #   image: otel/opentelemetry-collector-contrib
  #   command: [
  #     "/otelcol-contrib",
  #     "--config=/conf/otel-collector-config.yaml"
  #   ]
  #   privileged: true
  #   ports:
  #     - 4317:4317
  #     - 4318:4318
  #     - 9413:9411
  #   volumes:
  #     - ./components/otel-collector-config.yaml:/conf/otel-collector-config.yaml
  #   networks:
  #     - mission-critical-network



volumes:
  redisinsights: